#!/usr/bin/env node

const cookieParser = require("cookie-parser");
const express = require("express");
const cors = require("cors");
const https = require("https");
const http = require("http");
const appInit = require("../app");

// const i18next = require("../shared/i18next");
const registerModule = require("../shared/modules/register");
const requestLog = require("../shared/middleware/request-log");
const session = require("../shared/middleware/session");
const errorHandler = require("../shared/middleware/error-handler");
const trustProxy = require("../shared/middleware/trust-proxy");
const compression = require("../shared/middleware/compression");

const app = express();
app.use(express.urlencoded({ extended: true }));
app.use(express.json({ limit: "1mb" }));
app.use(cors({ credentials: true, origin: true }));

if (!process.isProd()) {
    const morgan = require("morgan");
    app.use(morgan("combined"));
}

app.use(cookieParser());
app.use(requestLog);
// app.use(i18next);

trustProxy(app);
app.use(session);
compression(app);

app.use(errorHandler.first);
registerModule.www(app);
app.use(errorHandler.global);

const debug = require("debug")("myapp:server");

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.APP_PORT || process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP/HTTPS server.
 */
const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
appInit(function () {
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
    global.server = server;
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug(`Listening on ${bind}`);
    console.log(`Listening on ${bind}`);

    if (process.isProd()) {
        console.log = function () {};
        console.info = function () {};
        console.warn = function () {};
        console.debug = function () {};
        // console.error = function () {};
    }
}
